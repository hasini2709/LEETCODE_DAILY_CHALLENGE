LeetCode Problem 72: Edit Distance
Problem Statement:
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
The operations allowed are:

Insert a character
Delete a character
Replace a character

Approach
This is a Dynamic Programming (DP) problem.

Steps:
Define DP Array:
Create a 2D DP table dp[i][j] where:

dp[i][j] represents the minimum operations needed to convert the first i characters of word1 into the first j characters of word2.
Base Cases:

If one string is empty, all operations involve either inserting or deleting characters.
dp[i][0] = i (convert word1[0...i] to an empty string by deleting all characters).
dp[0][j] = j (convert an empty string to word2[0...j] by inserting all characters).
Transition Formula:

If the characters are the same (word1[i-1] == word2[j-1]), no new operation is needed:
dp[i][j] = dp[i-1][j-1].
Otherwise, consider the three possible operations and take the minimum:
Insert: dp[i][j-1] + 1
Delete: dp[i-1][j] + 1
Replace: dp[i-1][j-1] + 1
dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]).
Final Result:

The value at dp[m][n] gives the minimum operations to convert word1 of length m into word2 of length n.

SOLUTION:

#include <vector>
#include <string>
#include <algorithm>
using namespace std;

class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size();
        int n = word2.size();
        
        // Create a 2D DP table
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        
        // Base cases: converting to/from empty strings
        for (int i = 0; i <= m; i++) dp[i][0] = i; // Deletion
        for (int j = 0; j <= n; j++) dp[0][j] = j; // Insertion
        
        // Fill the DP table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1[i - 1] == word2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1]; // No operation needed
                } else {
                    dp[i][j] = 1 + min({dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]});
                }
            }
        }
        
        return dp[m][n];
    }
};

Complexity Analysis
Time Complexity:
Filling the DP table requires O(m * n) operations, where m and n are the lengths of the strings.

Space Complexity:
The DP table requires O(m * n) space.

Takeaways
Dynamic Programming Strength:
This problem is a perfect example of how breaking a complex problem into smaller subproblems can simplify the solution.

String Manipulation Techniques:
Practiced operations like insertion, deletion, and replacement.

Optimization Insight:
Learned how to optimize for space by reducing the 2D table to a 1D array for certain scenarios.

Conclusion
Solving this problem deepened my understanding of dynamic programming and its application to real-world string manipulation challenges. The Edit Distance problem is a foundational problem that has applications in text processing, computational linguistics, and bioinformatics.
