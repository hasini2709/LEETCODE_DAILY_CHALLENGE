Problem Statement
Roman to Integer (LeetCode Problem 13)
Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.
Their respective integer values are:

Symbol	Value
I	1
V	5
X	10
L	50
C	100
D	500
M	1000
For example:

2 is written as II in Roman numeral, just two ones added together.
12 is written as XII, which is simply X + II.
27 is written as XXVII, which is XX + V + II.
However, Roman numerals have special rules:

When a smaller numeral appears before a larger numeral, it is subtracted (e.g., IV = 4, IX = 9).
Otherwise, the numerals are added (e.g., VI = 6, XII = 12).
Given a Roman numeral string, convert it to an integer.

Approach
Understand Roman Numeral Rules:

Use a mapping of Roman numerals to their integer values.
Handle special cases where subtraction is required.
Traverse the String:

Iterate through the string of Roman numerals.
Compare the current numeral's value with the previous numeral's value:
If the current value is larger, subtract twice the previous value (to correct the over-addition from the previous step).
Otherwise, add the current value.
Optimization:

Use an unordered map for constant-time lookup of Roman numeral values.
Implementation:

Accumulate the result while traversing the string.
Return the final accumulated value.


Solution

#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

int romanToInt(string s) {
    unordered_map<char, int> romanValues = {
        {'I', 1},
        {'V', 5},
        {'X', 10},
        {'L', 50},
        {'C', 100},
        {'D', 500},
        {'M', 1000}
    };

    int total = 0;
    int prevValue = 0;

    for (char c : s) {
        int currentValue = romanValues[c];
        if (currentValue > prevValue) {
            // Subtract twice the previous value to correct the total
            total += currentValue - 2 * prevValue;
        } else {
            total += currentValue;
        }
        prevValue = currentValue;
    }

    return total;
}

int main() {
    string roman;
    cout << "Enter a Roman numeral: ";
    cin >> roman;

    int result = romanToInt(roman);
    cout << "The integer value is: " << result << endl;

    return 0;
}
Example
Input:
text
Copy code
s = "IX"
Output:
text
Copy code
9
Explanation:
I is 1, and X is 10.
Since I appears before X, subtract I from X: 10 - 1 = 9.
Time Complexity
O(n): Where n is the length of the Roman numeral string. Each character is processed once.
Space Complexity: O(1) since the map of Roman numerals is constant and no additional space is used based on the input size.
